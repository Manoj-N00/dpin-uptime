name: Validator Service CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'apps/validator/**'
      - 'packages/**'
      - 'package.json'
      - 'bun.lockb'
      - '.github/workflows/validator.yml'
      - 'docker/production/Dockerfile.validator'
  pull_request:
    branches: [main]
    paths:
      - 'apps/validator/**'
      - 'packages/**'
      - 'package.json'
      - 'bun.lockb'
      - '.github/workflows/validator.yml'
      - 'docker/production/Dockerfile.validator'
env:
  SERVICE_NAME: validator
  DOCKERFILE_PATH: ./docker/production/Dockerfile.validator

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/dpin-${{ env.SERVICE_NAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/dpin-${{ env.SERVICE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Production Validators
        if: github.event_name != 'pull_request'
        env:
          DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$DEPLOY_SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # SSH and run deployment commands
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
            # Pull latest image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/dpin-${{ env.SERVICE_NAME }}:${{ github.sha }}
            
            # Stop existing container
            docker stop dpin-${{ env.SERVICE_NAME }} || true
            docker rm dpin-${{ env.SERVICE_NAME }} || true
            
            # Start new container
            docker run -d \
              --name dpin-${{ env.SERVICE_NAME }} \
              --restart unless-stopped \
              --network dpin-network \
              -e PRIVATE_KEY=${{ secrets.VALIDATOR_PRIVATE_KEY }} \
              --init \
              ${{ secrets.DOCKERHUB_USERNAME }}/dpin-${{ env.SERVICE_NAME }}:${{ github.sha }}
            
            # Cleanup old images
            docker image prune -f
          EOF

# docker run -d \
# --name dpin-validator \
# -e PRIVATE_KEY=4dpfw2kemvfQZmY4diM1u72ere7rowAvEoxMQBQ9rhztQgk8wwYoo9XRKMbC7Q1EDoWV3vsdEvmPxrb4eBgXzUsK \
# -e HUB_URL=wss://dpin-hub.itssvk.dev/ws/ \
# --init \
# itssvk/dpin-validator:latest

# -e HUB_URL=ws://dpin-hub:8081 \
